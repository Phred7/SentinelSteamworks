// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2906.SentinelSteamworks;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2906.SentinelSteamworks.commands.*;
import org.usfirst.frc2906.SentinelSteamworks.subsystems.*;

/**

 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;
	Command AutoNone;
	Command AutoGearOnLeft;
	Command AutoGearOnRight;
	Command AutoGearStrait;
	Command AutoTestDriveOnly;

	public static OI oi;
	public static DriveTrain driveTrain;
	public static GearMech gearMech;
	public static BallPickup ballPickup;
	public static Lift lift;
	public static Encoder leftDrive;
	public static Encoder rightDrive;

	SendableChooser<Command> auto = new SendableChooser<>();

	final String autoNone = "No Auto";
	final String autoGearOnLeft = "GearOnLeft";
	final String autoGearOnRight = "GearOnRight";
	final String autoGearOnStrait = "GearOnAhead";
	final String autoTestDriveOnly = "Test Drive";

	String[] autoList = { autoNone, autoGearOnLeft, autoGearOnRight, autoGearOnStrait, autoTestDriveOnly };

	public static CameraServer cameraServer;

	public void robotInit() {
		RobotMap.init();

		driveTrain = new DriveTrain();
		gearMech = new GearMech();
		ballPickup = new BallPickup();
		lift = new Lift();

		NetworkTable table = NetworkTable.getTable("SmartDashboard");
		table.putStringArray("Auto List", autoList);

		oi = new OI();

		auto = new SendableChooser();
		auto.addDefault("No Auto", new AutoNone());
		auto.addObject("GearOnLeft", new AutoGearOnLeft());
		auto.addObject("GearOnRight", new AutoGearOnRight());
		auto.addObject("GearAhead", new AutoGearStrait());
		auto.addObject("Test Drive Only", new AutoTestDriveOnly());
		SmartDashboard.putData("Auto modes", auto);
		
		SmartDashboard.putData("Test GearAhead", new AutoGearStrait());
	}

	public void disabledInit() {
		Robot.driveTrain.ResetEncoders();
	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		autonomousCommand = (Command) auto.getSelected();
	    System.out.println("Auto selected: " + auto.getSelected());
	   

		Robot.driveTrain.ResetEncoders();

		if (autonomousCommand != null) {
			autonomousCommand.start();
		}
	}

	public void autonomousPeriodic() {
		
		Scheduler.getInstance().run();
		SmartDashboard.putNumber("encoder value right", (RobotMap.encoderRight.get()));
        SmartDashboard.putNumber("encoder value left",  (RobotMap.encoderLeft.get()));

	}

	public void teleopInit() {

		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		SmartDashboard.putNumber("encoder value right", (RobotMap.encoderRight.get()));
        SmartDashboard.putNumber("encoder value left",  (RobotMap.encoderLeft.get()));
	}

	public void testPeriodic() {
		LiveWindow.run();
	}

}