// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2906.SentinelSteamworks;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2906.SentinelSteamworks.commands.*;
import org.usfirst.frc2906.SentinelSteamworks.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;
	Command AutoNone;
	Command AutoGearOnLeft;
	Command AutoGearOnRight;
	Command AutoGearStrait;

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static DriveTrain driveTrain;
	public static GearMech gearMech;
	public static BallPickup ballPickup;
	public static Lift lift;
	public static Encoder leftDrive;
	public static Encoder rightDrive;

	SendableChooser<String> auto = new SendableChooser<>();

	final String autoNone = "No Auto";
	final String autoGearOnLeft = "GearOnLeft";
	final String autoGearOnRight = "GearOnRight";
	final String autoGearOnStrait = "GearOnAhead";
	String[] autoList = { autoNone, autoGearOnLeft, autoGearOnRight, autoGearOnStrait };
	String autoSelected;

	public static CameraServer cameraServer;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveTrain = new DriveTrain();
		gearMech = new GearMech();
		ballPickup = new BallPickup();
		lift = new Lift();

		NetworkTable table = NetworkTable.getTable("SmartDashboard");
		table.putStringArray("Auto List", autoList);

		// 
		

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		// autonomousCommand = new AutonomousCommand();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	}
	public void autoChooser(){
		
		//auto = new SendableChooser();
		auto.addDefault("No Auto", new AutoNone());
		auto.addObject("GearOnLeft", new AutoGearOnLeft());
		auto.addObject("GearOnRight", new AutoGearOnRight());
		auto.addObject("GearAhead", new AutoGearStrait());
		SmartDashboard.putData("Auto modes", auto);
	}
	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */

	public void disabledInit() {

	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		autoSelected = (String) auto.getSelected();
		System.out.println("Auto selected: " + autoSelected);
		// schedule the autonomous command (example)
		Robot.driveTrain.ResetEncoders();

		if (autonomousCommand != null) {
			autonomousCommand.start();
		}
	}

	/**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
        switch(autoSelected) {
        case AutoGearOnLeft:
         
        break;
        case AutoGearOnRight:
        	
        break;
        case AutoGearOnStrait;
        
        break;
        case autoNone():
        default:
        
        break;
    }

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		SmartDashboard.putNumber("encoder value right", RobotMap.encoderRight.get());
		SmartDashboard.putNumber("encoder value left", RobotMap.encoderLeft.get());
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}

}