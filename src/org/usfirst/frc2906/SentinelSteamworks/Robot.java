// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2906.SentinelSteamworks;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2906.SentinelSteamworks.commands.*;
import org.usfirst.frc2906.SentinelSteamworks.subsystems.*;

public class Robot extends IterativeRobot {

	Command autonomousCommand;
	Command AutoNone;
	Command AutoBaseLine;
	Command AutoGearOnLeft;
	Command AutoGearOnRight;
	Command AutoGearStrait;
	Command AutoTestDriveOnly;
	Command AutoTime;
	Command AutoShootOnly;
	Command AutoGearStraitWithShootBlue;
	Command AutoGearStraitWithShootRed;

	public static OI oi;
	public static DriveTrain driveTrain;
	public static GearMech gearMech;
	public static BallPickup ballPickup;
	public static Lift lift;
	public static Encoder leftDrive;
	public static Encoder rightDrive;
	public static BallShooter shooter;

	SendableChooser<Command> auto = new SendableChooser<>();

	final String autoNone = "No Auto";
	final String autoGearOnLeft = "GearOnLeft";
	final String autoGearOnRight = "GearOnRight";
	final String autoGearOnStrait = "GearOnAhead";
	final String autoTestDriveOnly = "Test Drive";
	final String autoBaseLine = "Base Line";
	final String autoTime = "Auto Time Base Line";
	final String autoShootOnly = "Auto Shoot 10 Balls";
	final String autoGearStraitWithShootBlue = "blue side shooting with gear ahead";
	final String autoGearStraitWithShootRed = "red side shooting with gear ahead";

	String[] autoList = { autoNone, autoBaseLine, autoGearOnLeft, autoGearOnRight, autoGearOnStrait, autoTestDriveOnly,
			autoShootOnly, autoGearStraitWithShootBlue, autoGearStraitWithShootRed, autoTime };

	public static CameraServer cameraServer;

	public void robotInit() {
		RobotMap.init();

		driveTrain = new DriveTrain();
		gearMech = new GearMech();
		ballPickup = new BallPickup();
		lift = new Lift();
		oi = new OI();
		
		NetworkTable table = NetworkTable.getTable("SmartDashboard");
		table.putStringArray("Auto List", autoList);

		auto = new SendableChooser();
		auto.addDefault("No Auto", new AutoNone());
		auto.addObject("BaseLine", new AutoBaseLine());
		auto.addObject("GearOnLeft", new AutoGearOnLeft());
		auto.addObject("GearOnRight", new AutoGearOnRight());
		auto.addObject("GearAhead", new AutoGearStrait());
		auto.addObject("Test Drive Only", new AutoTestDriveOnly());
		auto.addObject("Auto Time Base Line", new AutoTime());
		auto.addObject("Shooter Only", new AutoBallShootOnly());
		auto.addObject("AutoGearStraitBlueShoot", new AutoGearStraitWithShootBlue());
		auto.addObject("AutoGearStraitRedShoot", new AutoGearStraitWithShootRed());
		
		SmartDashboard.putData("Auto modes", auto);
		SmartDashboard.putData("Test GearAhead", new AutoGearStrait());
		SmartDashboard.putData("Test GearHold", new GearMechIn());
		SmartDashboard.putData("Test GearRelease", new GearMechOut());
	}

	public void disabledInit() {
		Robot.driveTrain.ResetEncoders();
	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		autonomousCommand = (Command) auto.getSelected();
		SmartDashboard.getData("Auto selected: " + auto.getSelected());

		Robot.driveTrain.ResetEncoders();

		if (autonomousCommand != null) {
			autonomousCommand.start();
		}
	}

	public void autonomousPeriodic() {

		Scheduler.getInstance().run();
		SmartDashboard.putNumber("encoder value right", (RobotMap.encoderRight.get()));
		SmartDashboard.putNumber("encoder value left", (RobotMap.encoderLeft.get()));

	}

	public void teleopInit() {

		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		SmartDashboard.putNumber("encoder value right", (RobotMap.encoderRight.get()));
		SmartDashboard.putNumber("encoder value left", (RobotMap.encoderLeft.get()));
	}

	public void testPeriodic() {
		LiveWindow.run();
	}

}